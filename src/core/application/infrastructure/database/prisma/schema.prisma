// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Form {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isActive    Boolean     @default(true)
  submitLabel String      @default("Enviar")
  steps       FormStep[]
  submissions Submission[]
}

model FormStep {
  id             String         @id @default(cuid())
  formId         String
  order          Int
  title          String
  description    String?
  fields         Field[]
  form           Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
  webhook        Webhook?
  fieldMappings  FieldMapping[]
}

model Field {
  id          String        @id @default(cuid())
  stepId      String
  name        String
  label       String
  type        String
  placeholder String?
  required    Boolean       @default(false)
  order       Int
  validation  Json?
  options     Json?
  step        FormStep      @relation(fields: [stepId], references: [id], onDelete: Cascade)
  mappingsIn  FieldMapping[] @relation("TargetField")
  mappingsOut FieldMapping[] @relation("SourceField")
}

model Submission {
  id        String            @id @default(cuid())
  formId    String
  createdAt DateTime         @default(now())
  ip        String?
  userAgent String?
  form      Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  fields    SubmissionField[]
}

model SubmissionField {
  id           String     @id @default(cuid())
  submissionId String
  fieldId      String
  value        String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Webhook {
  id          String    @id @default(cuid())
  stepId      String    @unique
  enabled     Boolean   @default(false)
  endpoint    String
  method      String
  headers     Json?
  authType    String?
  authValue   String?
  useStepData Boolean   @default(true)
  step        FormStep  @relation(fields: [stepId], references: [id], onDelete: Cascade)
}

model FieldMapping {
  id            String    @id @default(cuid())
  stepId        String
  sourceFieldId String
  targetFieldId String
  transform     String?
  step          FormStep  @relation(fields: [stepId], references: [id], onDelete: Cascade)
  sourceField   Field     @relation("SourceField", fields: [sourceFieldId], references: [id], onDelete: Cascade)
  targetField   Field     @relation("TargetField", fields: [targetFieldId], references: [id], onDelete: Cascade)
}