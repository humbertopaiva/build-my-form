// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Form {
  id          String      @id @default(cuid())
  name        String 
  slug        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isActive    Boolean     @default(true)
  endpoint    String?    
  submitLabel String      @default("Enviar")
  steps       FormStep[]
  submissions Submission[]
}

model FormStep {
  id             String           @id @default(cuid())
  formId         String
  order          Int
  title          String
  description    String?
  form           Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  fields         Field[]
  webhook        Webhook?
  variables      StepVariable[]   
  conditions     StepCondition[]  
  fieldMappings  FieldMapping[]
}

model Field {
  id            String           @id @default(cuid())
  stepId        String
  name          String          
  label         String          
  type          String          
  placeholder   String?
  required      Boolean         @default(false)
  order         Int
  validation    Json?           
  options       Json?           
  visibility    Json?           
  helpText      String?         
  step          FormStep        @relation(fields: [stepId], references: [id], onDelete: Cascade)
  mappingsIn    FieldMapping[]  @relation("TargetField")
  mappingsOut   FieldMapping[]  @relation("SourceField")
  webhookConditions FieldCondition[] 
  submissions   SubmissionField[]
}

model Submission {
  id           String           @id @default(cuid())
  formId       String
  createdAt    DateTime         @default(now())
  ip           String?
  userAgent    String?
  form         Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  fields       SubmissionField[]
  webhookData  Json?           
}

model SubmissionField {
  id           String     @id @default(cuid())
  submissionId String
  fieldId      String
  value        String    
  field        Field     @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Webhook {
  id             String         @id @default(cuid())
  stepId         String         @unique
  enabled        Boolean        @default(false)
  endpoint       String
  method         String
  headers        Json?          // Alterado de String? para Json?
  authType       String         @default("none")
  authValue      String?
  selectedFields Json?          // Alterado de String? para Json?
  variables      Json?          // Novo campo para vari√°veis
  step           FormStep       @relation(fields: [stepId], references: [id], onDelete: Cascade)
}

model FieldMapping {
  id            String    @id @default(cuid())
  stepId        String
  sourceFieldId String    
  targetFieldId String    
  transform     String?   
  step          FormStep  @relation(fields: [stepId], references: [id], onDelete: Cascade)
  sourceField   Field     @relation("SourceField", fields: [sourceFieldId], references: [id], onDelete: Cascade)
  targetField   Field     @relation("TargetField", fields: [targetFieldId], references: [id], onDelete: Cascade)
}

model StepVariable {
  id          String    @id @default(cuid())
  stepId      String
  name        String    
  path        String    
  type        String    // string, number, boolean, array
  step        FormStep  @relation(fields: [stepId], references: [id], onDelete: Cascade)
}

model FieldCondition {
  id            String    @id @default(cuid())
  fieldId       String
  variablePath  String    // Alterado de variableName para variablePath
  operator      String    // equals, notEquals, contains, etc
  value         String    
  action        String    // show, hide, require, disable
  field         Field     @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

model StepCondition {
  id            String    @id @default(cuid())
  stepId        String
  variableName  String    
  operator      String    
  value         String    
  action        String    // skip, show
  step          FormStep  @relation(fields: [stepId], references: [id], onDelete: Cascade)
}